from smt2_parser import parse, independent_formulas, get_negated, get_subgroup

class Generator:
    def __init__(self, size, edges, sln, smt_file):
        self.size = size
        self.edges = edges
        self.sln = sln
        self.constraints, self.vars_all = parse(smt_file, check_neg = True)
        self.groups, self.vars = independent_formulas(self.constraints, self.vars_all)
        self.insert = list()
        for idx in range(self.size):
            self.insert.append(0)
        while sum(self.insert) < len(self.groups):
            for func in self.sln:
                self.insert[func] += 1
                if sum(self.insert) >= len(self.groups):
                    break

    def get_logic_def(self):
        logic_def = "signed char read_input(signed char *input, int index){ return input[index]; }\n"
        return logic_def

    def get_numb_edges(self, idx):
        return len(self.edges[idx])

    def get_groups(self, idx, group_idx):
        numb_edges = self.get_numb_edges(idx)
        if self.insert[idx] == 0:
            group, vars = get_subgroup(self.groups, self.vars, idx)
            negated_groups, new_vars = get_negated(self.constraints, group, vars, numb_edges - 1)
        else:
            group, vars = set(), set()
            for cnt in range(self.insert[idx]):
                group = group.union(self.groups[group_idx + cnt])
                vars = vars.union(self.vars[group_idx + cnt])
            negated_groups, new_vars = get_negated(self.constraints, group, vars, numb_edges - 2)
        return group, vars, negated_groups, new_vars

    def get_bug_edge(self, idx):
        next, bug_edge, = 0, 0
        for i in range(len(self.sln)):
            if self.sln[i] == idx:
                if i == len(self.sln) - 1:
                    next = 'bug'
                else:
                    next = self.sln[i+1]
        for n in range(len(self.edges[idx])):
            if self.edges[idx][n] == next:
                bug_edge = n
        return bug_edge

    def get_logic_c(self):
        logic_c = list()
        group_idx = 0
        for idx in range(self.size):
            group, vars, negated_groups, new_vars = self.get_groups(idx, group_idx)
            logic = ""
            copy_idx = 0
            for var in vars:
                logic += "\t\tsigned char {} = read_input(copy, {});\n".format(var, copy_idx)
                copy_idx += 1
            for i in range(len(new_vars)):
                logic += "\t\tsigned char {} = read_input(copy, {});\n".format(new_vars[i], copy_idx)
                copy_idx += 1
            logic += "\t\tint flag = 0;\n"
            if self.insert[idx] == 0:
                for n in range(len(negated_groups)):
                    tab_cnt = 0
                    for constraint in negated_groups[n]:
                        logic += "\t"*tab_cnt + "\t\tif{}{{\n".format(constraint)
                        tab_cnt += 1
                    logic += "\t"*tab_cnt + "\t\tflag = {};\n".format(n + 1)
                    for k in range(len(negated_groups[n])-1, -1, -1):
                        logic += "\t"*k + "\t\t}\n"
            else:
                numb_edges = self.get_numb_edges(idx)
                bug_edge = self.get_bug_edge(idx)
                tab_cnt = 0
                # function call towards func_bug
                for constraint in group:
                    logic += "\t"*tab_cnt + "\t\tif{}{{\n".format(constraint)
                    tab_cnt += 1
                if bug_edge == numb_edges - 1 and bug_edge > 0:
                    logic += "\t"*tab_cnt + "\t\tflag = {};\n".format(bug_edge)
                else:
                    logic += "\t"*tab_cnt + "\t\tflag = {};\n".format(bug_edge + 1)
                for k in range(len(group)-1, -1, -1):
                    logic += "\t"*k + "\t\t}\n"
                # rest of function calls
                for n in range(len(negated_groups)):
                    tab_cnt = 0
                    for constraint in negated_groups[n]:
                        logic += "\t"*tab_cnt + "\t\tif{}{{\n".format(constraint)
                        tab_cnt += 1
                    if n >= bug_edge:
                        logic += "\t"*tab_cnt + "\t\tflag = {};\n".format(n + 2)
                    else:
                        logic += "\t"*tab_cnt + "\t\tflag = {};\n".format(n + 1)
                    for k in range(len(negated_groups[n])-1, -1, -1):
                        logic += "\t"*k + "\t\t}\n"
            logic_c.append(logic)
            group_idx += self.insert[idx]
        return logic_c

    def get_numb_bytes(self):
        numb_bytes = list()
        group_idx = 0
        for idx in range(self.size):
            _, vars, _, new_vars = self.get_groups(idx, group_idx)
            numb_bytes.append(len(vars.union(new_vars)))
            group_idx += self.insert[idx]
        return numb_bytes

    def get_guard(self):
        guard = list()
        for idx in range(self.size):
            numb_edges = self.get_numb_edges(idx)
            conds = []
            if self.insert[idx] == 0:
                for n in range(numb_edges - 1):
                    conds.append("flag == " + str(n + 1))
                conds.append("flag == 0")
                guard.append(conds)
            else:
                bug_edge = self.get_bug_edge(idx)
                if bug_edge == numb_edges - 1:
                    if bug_edge == 0:
                        conds.append("flag == 1")
                    else:
                        for n in range(numb_edges - 2):
                            conds.append("flag == " + str(n + 1))
                        conds.append("flag == 0")
                        conds.append("flag == " + str(bug_edge))
                else:
                    for n in range(numb_edges - 1):
                        conds.append("flag == " + str(n + 1))
                    conds.append("flag == 0")
                guard.append(conds)
        return guard

    def get_total_bytes(self):
        return sum(self.get_numb_bytes())

    def get_bug(self):
        return "abort();"
