diff --git a/afl-fuzz.c b/afl-fuzz.c
index 61a3ee9..5c1c3c4 100644
--- a/afl-fuzz.c
+++ b/afl-fuzz.c
@@ -146,6 +146,7 @@ static s32 forksrv_pid,               /* PID of the fork server           */
            out_dir_fd = -1;           /* FD of the lock file              */
 
 EXP_ST u8* trace_bits;                /* SHM with instrumentation bitmap  */
+uint32_t* trace_path_hash;            /* SHM with instrumentation hash    */
 
 EXP_ST u8  virgin_bits[MAP_SIZE],     /* Regions yet untouched by fuzzing */
            virgin_tmout[MAP_SIZE],    /* Bits we haven't seen in tmouts   */
@@ -1360,7 +1361,7 @@ EXP_ST void setup_shm(void) {
   memset(virgin_tmout, 255, MAP_SIZE);
   memset(virgin_crash, 255, MAP_SIZE);
 
-  shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
+  shm_id = shmget(IPC_PRIVATE, MAP_SIZE + 0x10, IPC_CREAT | IPC_EXCL | 0600);
 
   if (shm_id < 0) PFATAL("shmget() failed");
 
@@ -1378,6 +1379,7 @@ EXP_ST void setup_shm(void) {
   ck_free(shm_str);
 
   trace_bits = shmat(shm_id, NULL, 0);
+  trace_path_hash = (uint32_t*)(trace_bits + MAP_SIZE);
   
   if (trace_bits == (void *)-1) PFATAL("shmat() failed");
 
diff --git a/qemu_mode/patches/afl-qemu-cpu-inl.h b/qemu_mode/patches/afl-qemu-cpu-inl.h
index c05bd77..219d393 100644
--- a/qemu_mode/patches/afl-qemu-cpu-inl.h
+++ b/qemu_mode/patches/afl-qemu-cpu-inl.h
@@ -236,6 +236,7 @@ static void afl_forkserver(CPUState *cpu) {
 static inline void afl_maybe_log(abi_ulong cur_loc) {
 
   static __thread abi_ulong prev_loc;
+  static uint32_t path_hash = 5381; // 'djb2' hash.
 
   /* Optimize for cur_loc > afl_end_code, which is the most likely case on
      Linux systems. */
@@ -243,6 +244,11 @@ static inline void afl_maybe_log(abi_ulong cur_loc) {
   if (cur_loc > afl_end_code || cur_loc < afl_start_code || !afl_area_ptr)
     return;
 
+  for (int i = 0; i < sizeof(abi_ulong); i++)
+     path_hash = ((path_hash << 5) + path_hash) + ((cur_loc >> (i<<3)) & 0xff);
+
+  *(uint32_t*)(&afl_area_ptr[MAP_SIZE]) = path_hash;
+
   /* Looks like QEMU always maps to fixed locations, so ASAN is not a
      concern. Phew. But instruction addresses may be aligned. Let's mangle
      the value to get something quasi-uniform. */
